import * as React from "react";
import { Frame, FramerEvent, PropertyControls, ControlType } from "framer";

interface Props {
    overrideHover: boolean,
    showBoundary: boolean,
    width: number,
    height: number
    tooltipVerticalPosition: "bottom" | "top",
    tooltipHorizontalPosition: "left" | "right"
}

export class ToolTipUtility extends React.Component<Props> {
    static defaultProps = {
        overrideHover: false,
        showBoundary: true,
        tooltipVerticalPosition: "bottom",
        tooltipHorizontalPosition: "left"
    }

    state = {
        hover: false
    }

    static propertyControls: PropertyControls<Props> = {
        overrideHover: { title: "Hover Override", type: ControlType.Boolean },
        showBoundary: { title: "Show boundaries", type: ControlType.Boolean },
        tooltipVerticalPosition: {
            title: "Vertical Positioning",
            type: ControlType.SegmentedEnum,
            options: ["top", "bottom"],
            optionTitles: ["Top", "Bottom"],
        },
        tooltipHorizontalPosition: {
            title: "Horizontal Positioning",
            type: ControlType.SegmentedEnum,
            options: ["left", "right"],
            optionTitles: ["Left", "Right"],
        }
    };

    popoverStyle(width, height): React.CSSProperties {

        let childHeight = this.props.children[0] ? this.props.children[0].props.height : 0
        let childWidth = this.props.children[0] ? this.props.children[0].props.width : 0

        return {
            marginTop: this.props.tooltipVerticalPosition == "top" ? -height - childHeight : 0,
            marginLeft: this.props.tooltipHorizontalPosition == "right" ? width - childWidth : 0
        }
    }

    render() {
        const { width, height } = this.props;

        console.log(this.props)
        return (
            <Frame
                width={width}
                height={height}
                background={null}>
                <div
                    onMouseEnter={() => this.setState({ hover: true })}
                    onMouseLeave={() => this.setState({ hover: false })}
                    style={{ width: "100%", height: "100%", border: this.props.showBoundary ? "solid 3px rgba(142, 68, 173,0.3)" : "none" }}
                >
                </div>
                <div
                    style={this.popoverStyle(width, height)}
                    onMouseEnter={() => this.setState({ hover: true })}
                    onMouseLeave={() => this.setState({ hover: false })}
                >
                    {this.props.overrideHover || this.state.hover ? this.props.children : ''}
                </div>
            </Frame >
        );
    }
}
